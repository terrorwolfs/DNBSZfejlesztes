{"chunk":3,"numChunks":38,"fileHash":"/VOaRKGkccsUroChFfOEZmHaUieW/94bwUw5qhaqW6I=","filePath":"FlaskWebProject/env1/Scripts/Activate.ps1","content":"    # Leave deactivate function in the global namespace if requested:\n    if (-not $NonDestructive) {\n        Remove-Item -Path function:deactivate\n    }\n}\n\n<#\n.Description\nGet-PyVenvConfig parses the values from the pyvenv.cfg file located in the\ngiven folder, and returns them in a map.\n\nFor each line in the pyvenv.cfg file, if that line can be parsed into exactly\ntwo strings separated by `=` (with any amount of whitespace surrounding the =)\nthen it is considered a `key = value` line. The left hand string is the key,\nthe right hand is the value.\n\nIf the value starts with a `'` or a `\"` then the first and last character is\nstripped from the value before being captured.\n\n.Parameter ConfigDir\nPath to the directory that contains the `pyvenv.cfg` file.\n#>\nfunction Get-PyVenvConfig(\n    [String]\n    $ConfigDir\n) {\n    Write-Verbose \"Given ConfigDir=$ConfigDir, obtain values in pyvenv.cfg\"\n\n    # Ensure the file exists, and issue a warning if it doesn't (but still allow the function to continue).\n    $pyvenvConfigPath = Join-Path -Resolve -Path $ConfigDir -ChildPath 'pyvenv.cfg' -ErrorAction Continue\n\n    # An empty map will be returned if no config file is found.\n    $pyvenvConfig = @{ }\n\n    if ($pyvenvConfigPath) {\n\n        Write-Verbose \"File exists, parse `key = value` lines\"\n        $pyvenvConfigContent = Get-Content -Path $pyvenvConfigPath\n\n        $pyvenvConfigContent | ForEach-Object {\n            $keyval = $PSItem -split \"\\s*=\\s*\", 2\n            if ($keyval[0] -and $keyval[1]) {\n                $val = $keyval[1]\n\n"}
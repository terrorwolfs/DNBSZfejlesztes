{"chunk":5,"numChunks":38,"fileHash":"/VOaRKGkccsUroChFfOEZmHaUieW/94bwUw5qhaqW6I=","filePath":"FlaskWebProject/env1/Scripts/Activate.ps1","content":"if ($Prompt) {\n    Write-Verbose \"Prompt specified as argument, using '$Prompt'\"\n}\nelse {\n    Write-Verbose \"Prompt not specified as argument to script, checking pyvenv.cfg value\"\n    if ($pyvenvCfg -and $pyvenvCfg['prompt']) {\n        Write-Verbose \"  Setting based on value in pyvenv.cfg='$($pyvenvCfg['prompt'])'\"\n        $Prompt = $pyvenvCfg['prompt'];\n    }\n    else {\n        Write-Verbose \"  Setting prompt based on parent's directory's name. (Is the directory name passed to venv module when creating the virtual environment)\"\n        Write-Verbose \"  Got leaf-name of $VenvDir='$(Split-Path -Path $venvDir -Leaf)'\"\n        $Prompt = Split-Path -Path $venvDir -Leaf\n    }\n}\n\nWrite-Verbose \"Prompt = '$Prompt'\"\nWrite-Verbose \"VenvDir='$VenvDir'\"\n\n# Deactivate any currently active virtual environment, but leave the\n# deactivate function in place.\ndeactivate -nondestructive\n\n# Now set the environment variable VIRTUAL_ENV, used by many tools to determine\n# that there is an activated venv.\n$env:VIRTUAL_ENV = $VenvDir\n\nif (-not $Env:VIRTUAL_ENV_DISABLE_PROMPT) {\n\n    Write-Verbose \"Setting prompt to '$Prompt'\"\n\n    # Set the prompt to include the env name\n    # Make sure _OLD_VIRTUAL_PROMPT is global\n    function global:_OLD_VIRTUAL_PROMPT { \"\" }\n    Copy-Item -Path function:prompt -Destination function:_OLD_VIRTUAL_PROMPT\n    New-Variable -Name _PYTHON_VENV_PROMPT_PREFIX -Description \"Python virtual environment prompt prefix\" -Scope Global -Option ReadOnly -Visibility Public -Value $Prompt\n\n    function global:prompt {\n        Write-Host -NoNewline -ForegroundColor Green \"($_PYTHON_VENV_PROMPT_PREFIX) \"\n"}
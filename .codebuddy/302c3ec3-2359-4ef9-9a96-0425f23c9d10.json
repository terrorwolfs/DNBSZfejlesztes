{"chunk":0,"numChunks":1,"fileHash":"UNEqdPH4/jaoLMdhMAfm5HpC7e25vDT7Xi3MUlJX8ow=","filePath":"FlaskWebProject/env1/Scripts/jsonpointer","content":"#!C:\\Users\\demel\\Desktop\\DNBSZfejlesztes-1\\FlaskWebProject\\env1\\Scripts\\python.exe\r\n# -*- coding: utf-8 -*-\n\n\nimport argparse\nimport json\nimport sys\n\nimport jsonpointer\n\nparser = argparse.ArgumentParser(\n    description='Resolve a JSON pointer on JSON files')\n\n# Accept pointer as argument or as file\nptr_group = parser.add_mutually_exclusive_group(required=True)\n\nptr_group.add_argument('-f', '--pointer-file', type=argparse.FileType('r'),\n                       nargs='?',\n                       help='File containing a JSON pointer expression')\n\nptr_group.add_argument('POINTER', type=str, nargs='?',\n                       help='A JSON pointer expression')\n\nparser.add_argument('FILE', type=argparse.FileType('r'), nargs='+',\n                    help='Files for which the pointer should be resolved')\nparser.add_argument('--indent', type=int, default=None,\n                    help='Indent output by n spaces')\nparser.add_argument('-v', '--version', action='version',\n                    version='%(prog)s ' + jsonpointer.__version__)\n\n\ndef main():\n    try:\n        resolve_files()\n    except KeyboardInterrupt:\n        sys.exit(1)\n\n\ndef parse_pointer(args):\n    if args.POINTER:\n        ptr = args.POINTER\n    elif args.pointer_file:\n        ptr = args.pointer_file.read().strip()\n    else:\n        parser.print_usage()\n        sys.exit(1)\n\n    return ptr\n\n\ndef resolve_files():\n    \"\"\" Resolve a JSON pointer on JSON files \"\"\"\n    args = parser.parse_args()\n\n    ptr = parse_pointer(args)\n\n    for f in args.FILE:\n        doc = json.load(f)\n        try:\n            result = jsonpointer.resolve_pointer(doc, ptr)\n            print(json.dumps(result, indent=args.indent))\n        except jsonpointer.JsonPointerException as e:\n            print('Could not resolve pointer: %s' % str(e), file=sys.stderr)\n\n\nif __name__ == \"__main__\":\n    main()\n"}
{"chunk":0,"numChunks":1,"fileHash":"ZKEOV1U/MUd1xCN2XS3BTd4fCKz6Pi+Q991MRlq7z7E=","filePath":"FlaskWebProject/WebApp/models.py","content":"from datetime import datetime\nfrom . import db\nfrom sqlalchemy.orm import validates\n\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    username = db.Column(db.String(20), unique=True, nullable=False)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    password = db.Column(db.String(60), nullable=False)\n    bookings = db.relationship('Booking', backref='customer', lazy='dynamic')\n\n    def __repr__(self):\n        return f\"User('{self.username}', '{self.email}')\"\n\nclass Room(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    room_number = db.Column(db.Integer, nullable=False)\n    capacity = db.Column(db.Integer, nullable=False)\n    bookings = db.relationship('Booking', backref='room', lazy='dynamic')\n\n    def __repr__(self):\n        return f\"Room('{self.room_number}', '{self.capacity}')\"\n\nclass Booking(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    start_date = db.Column(db.DateTime, nullable=False, default=datetime.utcnow)\n    end_date = db.Column(db.DateTime, nullable=False)\n    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)\n    room_id = db.Column(db.Integer, db.ForeignKey('room.id'), nullable=False)\n\n    @validates('start_date', 'end_date')\n    def validate_dates(self, key, date):\n        if key == 'start_date':\n            if date > self.end_date:\n                raise ValueError('Start date must be before end date')\n        if key == 'end_date':\n            if date < self.start_date:\n                raise ValueError('End date must be after start date')\n        return date\n\n    def __repr__(self):\n        return f\"Booking('{self.start_date}', '{self.end_date}', '{self.customer.username}', '{self.room.room_number}')\"\n"}
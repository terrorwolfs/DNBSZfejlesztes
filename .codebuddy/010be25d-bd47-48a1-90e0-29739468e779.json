{"chunk":0,"numChunks":1,"fileHash":"dDlKIM8CIbudY8yvEFV7XrXr4nVql7SnUD58zKZlXsI=","filePath":"FlaskWebProject/migrations/env.py","content":"from __future__ import with_statement\n\nimport logging\nfrom logging.config import fileConfig\n\nfrom flask import current_app\n\nfrom alembic import context\n\nconfig = context.config\n\nfileConfig(config.config_file_name)\nlogger = logging.getLogger('alembic.env')\n\ndef get_engine():\n    try:\n        return current_app.extensions['migrate'].db.get_engine()\n    except TypeError:\n        return current_app.extensions['migrate'].db.engine\n\nconfig.set_main_option(\n    'sqlalchemy.url', str(get_engine().url).replace('%', '%%'))\ntarget_metadata = current_app.extensions['migrate'].db.metadata\n\ndef run_migrations_offline():\n    url = config.get_main_option(\"sqlalchemy.url\")\n    context.configure(\n        url=url, target_metadata=target_metadata, literal_binds=True\n    )\n\n    with context.begin_transaction():\n        context.run_migrations()\n\ndef run_migrations_online():\n    def process_revision_directives(context, revision, directives):\n        if getattr(config.cmd_opts, 'autogenerate', False):\n            script = directives[0]\n            if script.upgrade_ops.is_empty():\n                directives[:] = []\n                logger.info('No changes in schema detected.')\n\n    connectable = get_engine()\n\n    with connectable.connect() as connection:\n        context.configure(\n            connection=connection,\n            target_metadata=target_metadata,\n            process_revision_directives=process_revision_directives,\n            **current_app.extensions['migrate'].configure_args\n        )\n\n        with context.begin_transaction():\n            context.run_migrations()\n\nif context.is_offline_mode():\n    run_migrations_offline()\nelse:\n    run_migrations_online()\n"}